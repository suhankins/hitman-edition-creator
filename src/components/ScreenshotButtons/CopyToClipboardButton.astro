---
import ActionButton from './../ActionButton.astro';
---

<ActionButton data-copy-to-clipboard> Copy to clipboard </ActionButton>

<style>
    [data-copy-to-clipboard]::before {
        background-image: url('/icons/copy.svg');
    }

    [data-copy-to-clipboard][aria-busy='true']::before {
        background-image: url('/icons/loading.svg');
    }

    [data-copy-to-clipboard]:not([data-copied='true']):not(
            [aria-busy='true']
        ):hover::before,
    [data-copy-to-clipboard]:not([data-copied='true']):not(
            [aria-busy='true']
        ):focus::before,
    [data-copy-to-clipboard][aria-pressed='true']::before {
        background-image: url('/icons/copy-hover.svg');
    }

    [data-copy-to-clipboard][data-copied='true'],
    [data-copy-to-clipboard][aria-busy='true'] {
        color: transparent;
    }

    [data-copy-to-clipboard][data-copied='true']::before {
        background-image: url('/icons/checkmark.svg');
    }

    [data-copy-to-clipboard][aria-busy='true']::after {
        content: 'Loading...';
        position: absolute;
        color: #ffffff;
        padding-left: calc(1.8em + 0.5ch);
    }

    [data-copy-to-clipboard][data-copied='true']::after {
        content: 'Copied!';
        position: absolute;
        color: #ffffff;
        padding-left: calc(1.8em + 0.5ch);
    }
</style>

<script>
    import convertToCanvas from './convertToCanvas';

    async function canvasToBlob(
        canvas: HTMLCanvasElement
    ): Promise<Blob | null> {
        return new Promise((resolve) => {
            canvas.toBlob((blob) => resolve(blob));
        });
    }

    if (!navigator.clipboard || !ClipboardItem.supports('image/png')) {
        document.querySelector('[data-copy-to-clipboard]')?.remove();
    }

    document
        .querySelector('[data-copy-to-clipboard]')
        ?.addEventListener('click', async (event) => {
            const target = event.target as HTMLButtonElement;
            target.disabled = true;
            target.ariaBusy = 'true';
            let success = false;
            await convertToCanvas().then(async (canvas) => {
                const image = await canvasToBlob(canvas);
                if (image === null) {
                    alert('Error while creating the image!');
                    return;
                }
                await navigator.clipboard
                    .write([
                        new ClipboardItem({
                            [image.type]: image,
                        }),
                    ])
                    .then(() => {
                        success = true;
                    })
                    .catch((error) => {
                        alert(
                            `Couldn't copy the image to clipboard! Error: ${error}`
                        );
                    });
            });
            target.disabled = false;
            target.ariaBusy = 'false';
            if (success) {
                target.dataset.copied = 'true';
                setTimeout(() => (target.dataset.copied = 'false'), 2000);
            }
        });
</script>
