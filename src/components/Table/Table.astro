---
import AddColumnButton from './AddColumnButton.astro';
import AddRowButton from './AddRowButton.astro';
import ComparisonGridHeader from './ComparisonGridHeader.astro';
import NewCell from './NewCell';
import NewColumnHeader from './NewColumnHeader';
import NewDeleteColumnButton from './NewDeleteColumnButton';
import NewDeleteRowButton from './NewDeleteRowButton';
import NewRowHeader from './NewRowHeader';
import DEFAULT_STATE from './states/DefaultTableState';
---

<div class="background">
    <table class="table" data-edition-table>
        <thead>
            <tr>
                <td>
                    <ComparisonGridHeader />
                </td>
                {
                    DEFAULT_STATE.editions.map((edition, index) => (
                        <th data-table-column={index + 1}>
                            <Fragment
                                set:html={NewColumnHeader(edition.name)}
                            />
                        </th>
                    ))
                }
                <td>
                    <AddColumnButton />
                </td>
            </tr>
        </thead>
        <tbody>
            {
                DEFAULT_STATE.content.map((content) => (
                    <tr>
                        <th>
                            <Fragment set:html={NewRowHeader(content.name)} />
                        </th>
                        {content.ownership.map((ownership, index) => (
                            <td data-table-column={index + 1}>
                                <Fragment set:html={NewCell(ownership)} />
                            </td>
                        ))}
                        <td>
                            <Fragment set:html={NewDeleteRowButton()} />
                        </td>
                    </tr>
                ))
            }
            <tfoot>
                <tr>
                    <td>
                        <AddRowButton />
                    </td>
                    {
                        DEFAULT_STATE.editions.map((_, index) => (
                            <td data-table-column={index + 1}>
                                <Fragment set:html={NewDeleteColumnButton()} />
                            </td>
                        ))
                    }
                    <td>
                        <div class="table-padding"></div>
                    </td>
                </tr>
            </tfoot>
        </tbody>
    </table>
</div>

<script is:inline>
    function selectCover(element) {
        const newImageUrl = window.URL.createObjectURL(element.files[0]);
        const oldImageUrl = element.previousElementSibling.src.slice(5, -2);
        if (oldImageUrl.startsWith('blob:')) {
            window.URL.revokeObjectURL(oldImageUrl);
        }
        element.previousElementSibling.src = newImageUrl;
        element.dataset.imageApplied = true;
    }

    function deleteColumn(deleteButton) {
        const tableColumn = deleteButton.parentElement.dataset.tableColumn;
        const parsedTableColumn = parseInt(tableColumn);
        document.querySelectorAll(`[data-table-column]`).forEach((element) => {
            if (element.dataset.tableColumn === tableColumn) {
                element.remove();
            }
            const elementTableColumn = parseInt(element.dataset.tableColumn);
            if (elementTableColumn > parsedTableColumn) {
                element.dataset.tableColumn = `${elementTableColumn - 1}`;
            }
        });
    }

    function deleteRow(deleteButton) {
        deleteButton?.parentElement?.parentElement.remove();
    }
</script>

<style is:global>
    .table {
        border-collapse: separate;
        border-spacing: 1px 4px;
    }

    .background {
        background-image: url('/background.png');
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
        width: fit-content;
        padding: 5px;
    }

    .edition-cover {
        display: flex;
        width: 100%;
        height: 215px;
        justify-content: center;
        align-items: center;
        background-position: center;
        position: relative;
    }

    .edition-cover-image {
        object-fit: cover;
        position: absolute;
        width: 100%;
        height: 100%;
    }

    .edition-cover-selector {
        color: transparent;
        width: 9ch;
    }

    .edition-cover .edition-cover-selector[data-image-applied] {
        visibility: hidden;
    }

    .edition-cover:hover .edition-cover-selector[data-image-applied] {
        visibility: visible;
    }

    .table th {
        text-transform: uppercase;
    }

    .table thead th {
        background-color: white;
        color: #2c2c2c;
        padding-left: 2px;
        padding-right: 2px;
        padding-top: 2px;
        padding-bottom: 0.25em;
        min-width: 16ch;
        width: 16ch;
        max-width: 16ch;
        vertical-align: top;
    }

    .table thead th p {
        margin-top: 0.25em;
    }

    .table th p {
        margin: 0 0 0 0;
        line-height: 1;
    }

    .table th,
    .table td {
        position: relative;
    }

    .table tbody th,
    .table tbody td {
        background-color: #2f414588;
        height: 2.5em;
    }

    .table tbody td:has(.full-cell-button) {
        background: none;
    }

    .table tbody td {
        padding: 0;
    }

    .full-cell-button {
        text-align: center;
        font-size: inherit;
        font-family: inherit;
        border: none;
        display: flex;
        justify-content: center;
        align-items: center;
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        padding: 5px;
        background-color: #2f414588;
        opacity: 0.5;
        border-radius: 0;
    }

    .full-cell-button:hover,
    .full-cell-button:focus {
        opacity: 1;
    }

    .table-padding {
        width: 32px;
        height: 32px;
    }

    .included-button {
        background-color: #f8021b;
        text-align: center;
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        font-size: inherit;
        font-family: inherit;
        border: none;
        display: flex;
        gap: 0.5ch;
        justify-content: center;
        align-items: center;
        border-radius: 0;
    }

    .included-button[aria-pressed='false'] {
        background: none;
        color: transparent;
    }

    .included-button[aria-pressed='false'] > * {
        opacity: 0;
    }

    .included-button[aria-pressed='false']:hover {
        background-color: #f8021b;
        color: inherit;
        opacity: 0.5;
    }

    .included-button[aria-pressed='false']:hover > * {
        opacity: 1;
    }

    .included-button > img {
        width: 1em;
        height: 1em;
    }

    .table tbody th {
        color: #d0d3d6;
        padding-left: 2ch;
        position: relative;
        padding-right: 1ch;
        text-align: right;
    }

    .table tbody th::after {
        content: '';
        position: absolute;
        right: -1px;
        top: 0;
        width: 1px;
        background-color: #2f414588;
        height: 100%;
    }

    .table tfoot td {
        vertical-align: middle;
        text-align: center;
    }
</style>
